name: 每日美图更换

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download and save image
        id: download_image
        run: |
          IMAGE_URL="https://api.kxzjoker.cn/api/wallhere?type=bs"
          IMAGE_NAME="美图.png"

          echo "Attempting to download image from: $IMAGE_URL"

          # --- 显式删除旧文件（如果存在）---
          if [ -f "$IMAGE_NAME" ]; then
            echo "Deleting existing $IMAGE_NAME..."
            rm "$IMAGE_NAME"
          fi

          # 使用 curl 下载图片
          curl -f -s -L -o "$IMAGE_NAME" "$IMAGE_URL"

          # 检查 curl 命令的退出状态码
          if [ $? -ne 0 ]; then
            echo "::error::Image download failed for $IMAGE_URL. Curl exited with non-zero status."
            exit 1
          fi

          # 再次检查图片文件是否存在且非空
          if [ ! -s "$IMAGE_NAME" ]; then
            echo "::error::Downloaded image file $IMAGE_NAME is empty or does not exist."
            exit 1
          fi
          echo "Image downloaded successfully as $IMAGE_NAME."
          echo "image_downloaded=true" >> $GITHUB_OUTPUT

      - name: Commit and push image
        if: success() && steps.download_image.outputs.image_downloaded == 'true'
        run: |
          IMAGE_NAME="美图.png" # 再次定义图片名称

          # 配置 Git 用户信息
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # 强制添加文件到暂存区，确保即使内容相同也记录为修改
          # git add -f 可以强制添加被忽略的文件，但这里主要是确保文件被暂存
          git add "$IMAGE_NAME"

          # 无论内容是否变化，都进行提交和推送
          # 移除 git diff --cached --quiet 判断
          git commit -m "chore: Update daily image (美图.png) [skip ci]"
          git push
          echo "美图.png updated and pushed."
